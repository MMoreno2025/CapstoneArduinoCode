#include <SPI.h>    //sensor library//
#include <Wire.h>   
#include <Arduino.h>    //allows for classese/functions to be made//
#include <ZMPT101B.h>   //ZMPT101B library//

//constant variables//
float correctionFactor = 6.5;
float Current_Value = 0;
const int houseVolts = 120;

const int ACPin1 = A0;
const int ACPin2 = A1;
const int ACPin3 = A2;

#define ACTectionRange 20;    //set AC Current sensor with tection range 20A//
#define VREF 5
char watt[5];
unsigned long last_time = 0;
unsigned long current_time = 0;
float Kwh = 0;

//set arrays for pricing plan//
float price;
float pricing[] = {11.4, 42.9, 47.8};
bool SuperOffP = false, OffP = false, OnP = false; 

void setup() {
  Serial.begin(115200);
  pinMode(ACPin1, INPUT);
  pinMode(ACPin2, INPUT);
  pinMode(ACPin3, INPUT);


  //use ZMPT101B//
  voltageSensor.setSensitivity(SENSITIVITY);
  
  delay(2000);
}

void loop() {
  //get watts being read by each sensor//
  float wattsOne = findWatt(ACPin1);
  float wattsTwo = findWatt(ACPin2);
  float wattsThree = findWatt(ACPin3);
  //calculate total watts used using these values//
  float totalWattUsed = wattsOne + wattsTwo - wattsThree;

  //Find KWtts | Kwh = (watts/1000)*hours | hours = sec -> hours since we are reading watts per second//
  Kwh = (totalWattUsed/1000)*1800; 
  Serial.println(Kwh);    

  //find price or electricity at a specific time//
  offP = true;
  if(SuperOffP){
    price = totalWattUsed * pricing[0];
  }else if(OffP){
    price = totalWattUsed * pricing[1];
  }else if(OnP){
    price = totalWattsUsed * pricing[2];
  }


  delay(1000);
}

float findWatt(int ACPin){
  float ACCurrentValue = 0;
  float peakVoltage = 0;
  float voltageVirtualValue = 0;
  for(int i=0; i<5; i++){
    peakVoltage += analogRead(ACPin);
    peakVoltage = peakVoltage + correctionFactor;
    delay(1);
  }
  peakVoltage = peakVoltage/5;
  voltageVirtualValue = peakVoltage*0.707;
  voltageVirtualValue = (voltageVirtualValue/1024*VREF)/2;
  ACCurrentValue = voltageVirtualValue*ACTectionRange;

  //calculate watts using volts//
  float WtsAtTime = ACCurrentValue * houseVolts;

  return WtsAtTime;
}
